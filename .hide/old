/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   old                                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lsilva-x <lsilva-x@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 16:04:59 by lsilva-x          #+#    #+#             */
/*   Updated: 2024/11/12 17:55:52 by lsilva-x         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./get_next_line.h"

#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

char *ft_strdup(const char *s);
char *ft_strjoin(char const *s1, char const *s2);

static int gnl_update_buffer(char **buffer, char **line) {
	char *tmp_buffer;
	int i = 0;

	while ((*buffer)[i] && (*buffer)[i] != '\n')
		i++;
	if ((*buffer)[i] == '\n') {
		(*buffer)[i] = '\0';
		*line = ft_strdup(*buffer);
		tmp_buffer = ft_strdup(&(*buffer)[i + 1]);
		free(*buffer);
		*buffer = tmp_buffer;
		return (1);
	}
	return (0);
}

static int gnl_read_file(char **buffer, char **line, int fd) {
	char *heap;
	char *tmp_buffer;
	int cnt;

	heap = (char *)malloc((BUFFER_SIZE + 1) * sizeof(char));
	if (!heap)
		return (-1);
	while ((cnt = read(fd, heap, BUFFER_SIZE)) > 0) {
		heap[cnt] = '\0';
		tmp_buffer = *buffer;
		*buffer = ft_strjoin(tmp_buffer, heap);
		free(tmp_buffer);
		if (!*buffer) {
			free(heap);
			return (-1);
		}
		if (gnl_update_buffer(buffer, line)) {
			free(heap);
			return (1);
		}
	}
	free(heap);
	return (cnt);
}

char *get_next_line(int fd) {
	static char *buffer[1024];
	char *line = NULL;
	int result;

	if (fd < 0 || BUFFER_SIZE <= 0 || read(fd, NULL, 0) < 0)
		return (NULL);
	if (buffer[fd] && gnl_update_buffer(&buffer[fd], &line))
		return (line);
	result = gnl_read_file(&buffer[fd], &line, fd);
	if (result <= 0 && buffer[fd]) {
		free(buffer[fd]);
		buffer[fd] = NULL;
	}
	return (result == 1 ? line : NULL);
}
